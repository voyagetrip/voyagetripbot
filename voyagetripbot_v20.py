
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)


BOT_TOKEN = '7209793844:AAHk1ilKgHRMbhbcDI1hZD7hFVowtYwHiR4'
ADMIN_CHAT_ID = 8207687995


LANGUAGE, NAME, PHONE, COUNTRY, DATE = range(5)
user_data = {}

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–†—É—Å—Å–∫–∏–π üá∑üá∫', 'O‚Äòzbekcha üá∫üáø', 'English üá¨üáß']]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang / Choose your language:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return LANGUAGE

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text
    user_data[update.effective_chat.id] = {'lang': lang}
    if "–†—É—Å—Å–∫–∏–π" in lang:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif "O‚Äòzbekcha" in lang:
        await update.message.reply_text("Iltimos, ismingizni kiriting:")
    else:
        await update.message.reply_text("Please enter your name:")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['name'] = update.message.text
    lang = user_data[update.effective_chat.id]['lang']
    msg = {
        "–†—É—Å—Å–∫–∏–π": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "O‚Äòzbekcha": "Telefon raqamingizni kiriting:",
    }.get(lang.split()[0], "Enter your phone number:")
    await update.message.reply_text(msg)
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['phone'] = update.message.text
    lang = user_data[update.effective_chat.id]['lang']
    msg = {
        "–†—É—Å—Å–∫–∏–π": "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å:",
        "O‚Äòzbekcha": "Qaysi mamlakatga borishni xohlaysiz?",
    }.get(lang.split()[0], "Which country do you want to travel to?")
    await update.message.reply_text(msg)
    return COUNTRY

async def country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['country'] = update.message.text
    lang = user_data[update.effective_chat.id]['lang']
    msg = {
        "–†—É—Å—Å–∫–∏–π": "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:",
        "O‚Äòzbekcha": "Sayohat sanasini kiriting:",
    }.get(lang.split()[0], "Enter your intended travel date:")
    await update.message.reply_text(msg)
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id]['date'] = update.message.text
    data = user_data[chat_id]

    message = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"üåê –Ø–∑—ã–∫: {data['lang']}"
    )

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, country)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
